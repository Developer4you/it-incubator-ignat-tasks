{"version":3,"sources":["p2-homeworks/h1/Message.module.css","p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.module.css","p1-main/m1-ui/u1-app/App.module.css","p2-homeworks/h2/Affairs.module.css","p2-homeworks/h3/Greeting.module.css","p2-homeworks/h4/HW4.module.css","p2-homeworks/h4/common/c2-SuperButton/SuperButton.module.css","p2-homeworks/h4/common/c3-SuperCheckbox/SuperCheckbox.module.css","p2-homeworks/h2/HW2.module.css","p2-homeworks/h1/Message.tsx","p2-homeworks/h1/HW1.tsx","p2-homeworks/h2/Affair.tsx","p2-homeworks/h2/Affairs.tsx","p2-homeworks/h2/HW2.tsx","p2-homeworks/h3/Greeting.tsx","p2-homeworks/h3/GreetingContainer.tsx","p2-homeworks/h3/HW3.tsx","p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.tsx","p2-homeworks/h4/common/c2-SuperButton/SuperButton.tsx","p2-homeworks/h4/common/c3-SuperCheckbox/SuperCheckbox.tsx","p2-homeworks/h4/HW4.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Message","props","className","styles","message","src","avatar","alt","ponytail","messageField","name","messagesText","time","messageData","HW1","Affair","s","affair","affairName","onClick","deleteAffairCallback","_id","Affairs","mappedAffairs","data","map","a","setFilter","defaultAffairs","priority","HW2","useState","affairs","setAffairs","filter","filteredAffairs","filterAffairs","hw2","deleteAffair","Greeting","setNameCallback","addUser","error","totalUsers","inputClass","input","value","onChange","onKeyPress","e","charCode","GreetingContainer","users","addUserCallback","setName","setError","length","currentTarget","alert","HW3","setUsers","v1","SuperInputText","type","onChangeText","onEnter","spanClassName","restProps","finalSpanClassName","finalInputClassName","errorInput","superInput","key","SuperButton","red","finalClassName","default","SuperCheckbox","onChangeChecked","children","checkbox","checked","HW4","text","setText","showAlert","setChecked","column","blue","disabled","App","wrap","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.2d1ced96.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1SvTz\",\"messageField\":\"Message_messageField__2_KN3\",\"name\":\"Message_name__1bhaE\",\"messagesText\":\"Message_messagesText__1iD7G\",\"ponytail\":\"Message_ponytail__ZZEH_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__2lndr\",\"errorInput\":\"SuperInputText_errorInput__2Ak9j\",\"error\":\"SuperInputText_error__fTWyP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2sdsF\",\"wrap\":\"App_wrap__2avdB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"affair\":\"Affairs_affair__3nwPq\",\"affairName\":\"Affairs_affairName__1HvCl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Greeting_input__2d_i9\",\"error\":\"Greeting_error__1Ttn2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blue\":\"HW4_blue__2wKi-\",\"column\":\"HW4_column__3Bu18\",\"testSpanError\":\"HW4_testSpanError__i7_0h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__1hEdO\",\"red\":\"SuperButton_red__sB0xa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__1F8it\",\"spanClassName\":\"SuperCheckbox_spanClassName__1jKUi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hw2\":\"HW2_hw2__3ZyQk\"};","import React from 'react'\r\nimport styles from './Message.module.css'\r\n\r\ntype MessagePropsType = {\r\n    avatar: string\r\n    name: string\r\n    message: string\r\n    time: string\r\n}\r\n\r\nfunction Message(props: MessagePropsType) {\r\n    return (\r\n        <div className={styles.message}>\r\n            <div>\r\n                <img src={props.avatar} alt=\"Avatars_image\" />\r\n            </div>\r\n            <div className={styles.ponytail}>\r\n            </div>\r\n            <div className={styles.messageField}>\r\n                <div className={styles.name}>{props.name}</div>\r\n                <div className={styles.messagesText}>{props.message}</div>\r\n                <time>{props.time}</time>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React from 'react'\r\nimport Message from './Message'\r\n\r\nconst messageData = {\r\n    avatar: 'https://sun9-74.userapi.com/Ph-WiuOtF985il9AvN9JqiCWedmHtSGSSTXrSA/ltEB2Z2-YO4.jpg',\r\n    name: 'Some Name',\r\n    message: 'Sigh no more, ladies, sigh no more, Men were deceivers ever...',\r\n    time: '22:00',\r\n}\r\n\r\nfunction HW1() {\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            <h3>Homeworks 1</h3>\r\n\r\n            {/*should work (должно работать)*/}\r\n\r\n            <Message\r\n                avatar={messageData.avatar}\r\n                name={messageData.name}\r\n                message={messageData.message}\r\n                time={messageData.time}\r\n            />\r\n\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeMessage/>*/}\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HW1\r\n","import React from 'react'\r\nimport { AffairType } from './HW2'\r\nimport s from './Affairs.module.css'\r\n\r\ntype AffairPropsType = {\r\n    // key не нужно типизировать\r\n    affair:  AffairType\r\n    deleteAffairCallback: (_id: number)=>void\r\n}\r\n\r\nfunction Affair(props: AffairPropsType) {\r\n    const deleteCallback = () => {props.deleteAffairCallback(props.affair._id)}// need to fix\r\n\r\n    return (\r\n        <div className={s.affair}>\r\n            <div className={s.affairName}>{ props.affair.name }</div>\r\n            <button onClick={deleteCallback}>X</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Affair\r\n","import React from 'react'\r\nimport Affair from './Affair'\r\nimport {AffairType, FilterType} from './HW2'\r\n\r\ntype AffairsPropsType = { // need to fix any\r\n    data: Array<AffairType>\r\n    setFilter: (filter:FilterType)=>void\r\n    deleteAffairCallback: (_id:number)=>void\r\n}\r\n\r\nfunction Affairs(props: AffairsPropsType) {\r\n    const mappedAffairs = props.data.map((a: AffairType) => (\r\n        <Affair // should work\r\n            key={a._id} // кеи ОБЯЗАТЕЛЬНЫ в 99% - так что лучше их писать всегда при создании компонент в мапе\r\n            affair={a}\r\n            deleteAffairCallback={props.deleteAffairCallback}\r\n        />\r\n    ))\r\n\r\n    const setAll = () => {props.setFilter('all')}\r\n    const setHigh = () => {props.setFilter('high')}\r\n    const setMiddle = () => {props.setFilter('middle')}\r\n    const setLow = () => {props.setFilter('low')}\r\n\r\n    return (\r\n        <div>\r\n\r\n            {mappedAffairs}\r\n\r\n            <button onClick={setAll}>All</button>\r\n            <button onClick={setHigh}>High</button>\r\n            <button onClick={setMiddle}>Middle</button>\r\n            <button onClick={setLow}>Low</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Affairs\r\n","import React, {useState} from 'react'\r\nimport Affairs from './Affairs'\r\nimport s from './HW2.module.css'\r\n\r\n// types\r\nexport type AffairPriorityType = 'high'|'middle'|'low'\r\nexport type AffairType = {\r\n    _id: number\r\n    name: string\r\n    priority: string\r\n}\r\nexport type FilterType = 'all' | AffairPriorityType\r\n\r\n// constants\r\nconst defaultAffairs: Array<AffairType> = [\r\n    {_id: 1, name: 'React', priority: 'high'},\r\n    {_id: 2, name: 'anime', priority: 'low'},\r\n    {_id: 3, name: 'games', priority: 'low'},\r\n    {_id: 4, name: 'work', priority: 'high'},\r\n    {_id: 5, name: 'html & css', priority: 'middle'},\r\n]\r\n\r\n// pure helper functions\r\nexport const filterAffairs = (affairs: Array<AffairType>, filter: FilterType):Array<AffairType> => {\r\n    if (filter === 'all') return affairs\r\n    else return affairs.filter(a => a.priority === filter)\r\n}\r\nexport const deleteAffair = (affairs: Array<AffairType>, _id: number):Array<AffairType> => {\r\n    return affairs.filter( a => !(a._id === _id))\r\n}\r\n\r\nfunction HW2() {\r\n    const [affairs, setAffairs] = useState<Array<AffairType>>(defaultAffairs)\r\n    const [filter, setFilter] = useState<FilterType>('all')\r\n\r\n    const filteredAffairs = filterAffairs(affairs, filter)\r\n    const deleteAffairCallback = (_id: number) => setAffairs(deleteAffair(affairs, _id))\r\n\r\n    return (\r\n        <div className={s.hw2}>\r\n            <hr/>\r\n            <h3>Homeworks 2</h3>\r\n\r\n            {/*should work (должно работать)*/}\r\n            <Affairs\r\n                data={filteredAffairs}\r\n                setFilter={setFilter}\r\n                deleteAffairCallback={deleteAffairCallback}\r\n            />\r\n\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeAffairs/>*/}\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HW2\r\n","import React, { ChangeEvent } from \"react\";\r\nimport s from \"./Greeting.module.css\";\r\n\r\ntype GreetingPropsType = {\r\n  name: string; // need to fix any\r\n  setNameCallback: (e: ChangeEvent<HTMLInputElement>) => void; // need to fix any\r\n  addUser: () => void; // need to fix any\r\n  error: string; // need to fix any\r\n  totalUsers: number; // need to fix any\r\n};\r\n\r\n// презентационная компонента (для верстальщика)\r\nconst Greeting: React.FC<GreetingPropsType> = (\r\n  { name, setNameCallback, addUser, error, totalUsers } // деструктуризация пропсов\r\n) => {\r\n  const inputClass = name ? s.input : s.error; // need to fix with (?:)\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        value={name}\r\n        onChange={setNameCallback}\r\n        onKeyPress={(e) => {\r\n          if (e.charCode === 13) {\r\n            addUser();\r\n          }\r\n        }}\r\n        className={inputClass}\r\n      />\r\n      <button onClick={addUser}>add</button>\r\n      <div>{error}</div>\r\n      <span>{\"total users: \" + totalUsers}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Greeting;\r\n","import React, {ChangeEvent, useState} from 'react'\r\nimport Greeting from './Greeting'\r\nimport { UserType } from './HW3'\r\n\r\ntype GreetingContainerPropsType = {\r\n    users: Array<UserType> // need to fix any\r\n    addUserCallback: (name:string)=>void // need to fix any\r\n}\r\n\r\n// более простой и понятный для новичков\r\n// function GreetingContainer(props: GreetingPropsType) {\r\n\r\n// более современный и удобный для про :)\r\n// уровень локальной логики\r\nconst GreetingContainer: React.FC<GreetingContainerPropsType> = ({users, addUserCallback}) => { // деструктуризация пропсов\r\n    const [name, setName] = useState<string>('') // need to fix any\r\n    const [error, setError] = useState<string>('') // need to fix any\r\n\r\n    const setNameCallback = (e:ChangeEvent<HTMLInputElement>) => { // need to fix any\r\n        setName(e.currentTarget.value) // need to fix\r\n        setError('') \r\n    }\r\n    const addUser = () => {\r\n        if (name) {\r\n            addUserCallback(name);\r\n            alert(`Hello ${name}!`) // need to fix\r\n            setName('')\r\n        }\r\n        else setError('Please, inter your name!')\r\n        \r\n    }\r\n\r\n    const totalUsers = users.length // need to fix\r\n\r\n    return (\r\n        <Greeting\r\n            name={name}\r\n            setNameCallback={setNameCallback}\r\n            addUser={addUser}\r\n            error={error}\r\n            totalUsers={totalUsers}\r\n        />\r\n    )\r\n}\r\n\r\nexport default GreetingContainer\r\n","import {useState} from 'react'\r\nimport { v1 } from 'uuid'\r\nimport GreetingContainer from './GreetingContainer'\r\n\r\n// types\r\nexport type UserType = {\r\n    _id: string // need to fix any\r\n    name: string // need to fix any\r\n}\r\n\r\n// уровень работы с глобальными данными\r\nfunction HW3() {\r\n    const [users, setUsers] = useState<Array<UserType>>([]) // need to fix any\r\n\r\n    const addUserCallback = (name: string) => { // need to fix any\r\n        setUsers([...users, {_id:v1(), name: name}]) // need to fix\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            <h3>Homeworks 3</h3>\r\n\r\n            {/*should work (должно работать)*/}\r\n            <GreetingContainer users={users} addUserCallback={addUserCallback}/>\r\n\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeGreeting/>*/}\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HW3\r\n","import React, {\r\n  ChangeEvent,\r\n  DetailedHTMLProps,\r\n  InputHTMLAttributes,\r\n  KeyboardEvent,\r\n} from \"react\";\r\nimport s from \"./SuperInputText.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<\r\n  InputHTMLAttributes<HTMLInputElement>,\r\n  HTMLInputElement\r\n>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & {\r\n  // и + ещё пропсы которых нет в стандартном инпуте\r\n  onChangeText?: (value: string) => void;\r\n  onEnter?: () => void;\r\n  error?: string;\r\n  spanClassName?: string;\r\n};\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = ({\r\n  type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n  onChange,\r\n  onChangeText,\r\n  onKeyPress,\r\n  onEnter,\r\n  error,\r\n  className,\r\n  spanClassName,\r\n\r\n  ...restProps // все остальные пропсы попадут в объект restProps\r\n}) => {\r\n  const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n    onChange && // если есть пропс onChange\r\n      onChange(e); // то передать ему е (поскольку onChange не обязателен)\r\n\r\n    onChangeText && onChangeText(e.currentTarget.value);\r\n  };\r\n  const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    onKeyPress && onKeyPress(e);\r\n\r\n    onEnter && // если есть пропс onEnter\r\n      e.key === \"Enter\" && // и если нажата кнопка Enter\r\n      onEnter(); // то вызвать его\r\n  };\r\n\r\n  const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\r\n  const finalInputClassName = `${error ? s.errorInput : s.superInput}`; //+ need to fix with (?:) and s.superInput\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        type={\"text\"}\r\n        onChange={onChangeCallback}\r\n        onKeyPress={onKeyPressCallback}\r\n        className={finalInputClassName}\r\n        {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n      />\r\n      {error && <span className={finalSpanClassName}>{error}</span>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SuperInputText;\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import React, {\r\n  ChangeEvent,\r\n  DetailedHTMLProps,\r\n  InputHTMLAttributes,\r\n} from \"react\";\r\nimport s from \"./SuperCheckbox.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<\r\n  InputHTMLAttributes<HTMLInputElement>,\r\n  HTMLInputElement\r\n>;\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n  onChangeChecked?: (checked: boolean) => void;\r\n  spanClassName?: string;\r\n};\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = ({\r\n  type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n  onChange,\r\n  onChangeChecked,\r\n  className,\r\n  spanClassName,\r\n  children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n  ...restProps // все остальные пропсы попадут в объект restProps\r\n}) => {\r\n  const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n    onChange && onChange(e);\r\n    onChangeChecked && onChangeChecked(e.currentTarget.checked);\r\n    // сделайте так чтоб работал onChange и onChangeChecked\r\n  };\r\n\r\n  const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\r\n\r\n  return (\r\n    <label>\r\n      <input\r\n        type={\"checkbox\"}\r\n        onChange={onChangeCallback}\r\n        className={finalInputClassName}\r\n        {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n      />\r\n      {children && <span className={s.spanClassName}>{children}</span>}\r\n    </label> // благодаря label нажатие на спан передастся в инпут\r\n  );\r\n};\r\n\r\nexport default SuperCheckbox;\r\n","import React, { ChangeEvent, useState } from \"react\";\r\nimport SuperInputText from \"./common/c1-SuperInputText/SuperInputText\";\r\nimport s from \"./HW4.module.css\";\r\nimport SuperButton from \"./common/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"./common/c3-SuperCheckbox/SuperCheckbox\";\r\n\r\nfunction HW4() {\r\n  const [text, setText] = useState<string>(\"\");\r\n  const error = text ? \"\" : \"error\";\r\n\r\n  const showAlert = () => {\r\n    if (error) {\r\n      alert(\"введите текст...\");\r\n    } else {\r\n      alert(text); // если нет ошибки показать текст\r\n    }\r\n  };\r\n\r\n  const [checked, setChecked] = useState<boolean>(false);\r\n  const testOnChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setChecked(e.currentTarget.checked);\r\n  };\r\n  return (\r\n    <div>\r\n      <hr />\r\n      homeworks 4\r\n      <div className={s.column}>\r\n        <SuperInputText\r\n          value={text}\r\n          onChangeText={setText}\r\n          onEnter={showAlert}\r\n          error={error}\r\n          // spanClassName={s.testSpanError}\r\n        />\r\n\r\n        <SuperInputText\r\n          className={s.blue} // проверьте, рабоет ли смешивание классов\r\n        />\r\n\r\n        {/*----------------------------------------------------*/}\r\n\r\n        <SuperButton>default</SuperButton>\r\n\r\n        <SuperButton\r\n          red // пропсу с булевым значением не обязательно указывать true\r\n          onClick={showAlert}\r\n        >\r\n          delete {/*// название кнопки попадёт в children*/}\r\n        </SuperButton>\r\n\r\n        <SuperButton disabled>disabled</SuperButton>\r\n\r\n        {/*----------------------------------------------------*/}\r\n\r\n        <SuperCheckbox checked={checked} onChangeChecked={setChecked}>\r\n          some text {/*// этот текст попадёт в children*/}\r\n        </SuperCheckbox>\r\n\r\n        {/*// onChange тоже должен работать*/}\r\n        <SuperCheckbox checked={checked} onChange={testOnChange} />\r\n      </div>\r\n      <hr />\r\n      {/*для личного творчества, могу проверить*/}\r\n      {/*<AlternativeSuperInputText/>*/}\r\n      {/*<AlternativeSuperButton/>*/}\r\n      {/*<AlternativeSuperCheckbox/>*/}\r\n      <hr />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HW4;\r\n","import React from \"react\";\r\nimport s from \"./App.module.css\";\r\nimport HW1 from \"../../../p2-homeworks/h1/HW1\";\r\nimport HW2 from \"../../../p2-homeworks/h2/HW2\";\r\nimport HW3 from \"../../../p2-homeworks/h3/HW3\";\r\nimport HW4 from \"../../../p2-homeworks/h4/HW4\";\r\nimport HW5 from \"../../../p2-homeworks/h5/HW5\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className={s.App}>\r\n      <div className={s.wrap}>\r\n        <h2>React homeworks:</h2>\r\n        <HW1 />\r\n        <HW2 />\r\n        <HW3 />\r\n        <HW4 />\r\n        {/* <HW5 />*/}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        )\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config)\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    )\r\n                })\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing\r\n                if (installingWorker == null) {\r\n                    return\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            )\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration)\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.')\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error)\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type')\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload()\r\n                    })\r\n                })\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            )\r\n        })\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister()\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message)\r\n            })\r\n    }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './p1-main/m1-ui/u1-app/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}